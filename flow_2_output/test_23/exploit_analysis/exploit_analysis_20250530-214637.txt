Exploit Analysis Report
Generated At: 2025-05-30 21:46:37

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
pragma solidity ^0.4.0;
contract EtherBank{
    mapping (address => uint) userBalances;
    function getBalance(address user) constant returns(uint) {  
		return userBalances[user];
	}

	function addToBalance() {  
		userBalances[msg.sender] += msg.value;
	}

	function withdrawBalance() {  
		uint amountToWithdraw = userBalances[msg.sender];
        // <yes> <report> REENTRANCY
		if (!(msg.sender.call.value(amountToWithdraw)())) { throw; }
		userBalances[msg.sender] = 0;
	}
}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. Reentrancy (line 21): The `withdrawBalance` function allows recursive calls before updating the user balance, leading to multiple withdrawals before the balance is reset.

================================================================================
EXPLOIT DETAILS
================================================================================
1. Initial Call: `msg.sender.call.value(amountToWithdraw)()` is executed, transferring funds to the caller without updating the balance first.
2. Reentrant Loop: The attacker can recursively call `withdrawBalance`, exploiting the unchanged balance to withdraw more than the available amount.
3. Final State: The contract state is inconsistent, with `userBalances[msg.sender]` being set to `0` only after the reentrant calls complete.
