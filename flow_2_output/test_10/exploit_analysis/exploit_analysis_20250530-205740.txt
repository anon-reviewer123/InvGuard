Exploit Analysis Report
Generated At: 2025-05-30 20:57:40

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
 pragma solidity ^0.4.16;

contract Ethraffle_v4b {
    struct Contestant {
        address addr;
        uint raffleId;
    }

    event RaffleResult(
        uint raffleId,
        uint winningNumber,
        address winningAddress,
        address seed1,
        address seed2,
        uint seed3,
        bytes32 randHash
    );

    event TicketPurchase(
        uint raffleId,
        address contestant,
        uint number
    );

    event TicketRefund(
        uint raffleId,
        address contestant,
        uint number
    );

    // Constants
    uint public constant prize = 2.5 ether;
    uint public constant fee = 0.03 ether;
    uint public constant totalTickets = 50;
    uint public constant pricePerTicket = (prize + fee) / totalTickets; // Make sure this divides evenly
    address feeAddress;

    // Other internal variables
    bool public paused = false;
    uint public raffleId = 1;
    // <yes> <report> BAD_RANDOMNESS
    uint public blockNumber = block.number;
    uint nextTicket = 0;
    mapping (uint => Contestant) contestants;
    uint[] gaps;

    // Initialization
    function Ethraffle_v4b() public {
        feeAddress = msg.sender;
    }

    // Call buyTickets() when receiving Ether outside a function
    function () payable public {
        buyTickets();
    }

    function buyTickets() payable public {
        if (paused) {
            msg.sender.transfer(msg.value);
            return;
        }

        uint moneySent = msg.value;

        while (moneySent >= pricePerTicket && nextTicket < totalTickets) {
            uint currTicket = 0;
            if (gaps.length > 0) {
                currTicket = gaps[gaps.length-1];
                gaps.length--;
            } else {
                currTicket = nextTicket++;
            }

            contestants[currTicket] = Contestant(msg.sender, raffleId);
            TicketPurchase(raffleId, msg.sender, currTicket);
            moneySent -= pricePerTicket;
        }

        // Choose winner if we sold all the tickets
        if (nextTicket == totalTickets) {
            chooseWinner();
        }

        // Send back leftover money
        if (moneySent > 0) {
            msg.sender.transfer(moneySent);
        }
    }

    function chooseWinner() private {
        // <yes> <report> BAD_RANDOMNESS
        address seed1 = contestants[uint(block.coinbase) % totalTickets].addr;
        // <yes> <report> BAD_RANDOMNESS
        address seed2 = contestants[uint(msg.sender) % totalTickets].addr;
        // <yes> <report> BAD_RANDOMNESS
        uint seed3 = block.difficulty;
        bytes32 randHash = keccak256(seed1, seed2, seed3);

        uint winningNumber = uint(randHash) % totalTickets;
        address winningAddress = contestants[winningNumber].addr;
        RaffleResult(raffleId, winningNumber, winningAddress, seed1, seed2, seed3, randHash);

        // Start next raffle
        raffleId++;
        nextTicket = 0;
        // <yes> <report> BAD_RANDOMNESS
        blockNumber = block.number;

        // gaps.length = 0 isn't necessary here,
        // because buyTickets() eventually clears
        // the gaps array in the loop itself.

        // Distribute prize and fee
        winningAddress.transfer(prize);
        feeAddress.transfer(fee);
    }

    // Get your money back before the raffle occurs
    function getRefund() public {
        uint refund = 0;
        for (uint i = 0; i < totalTickets; i++) {
            if (msg.sender == contestants[i].addr && raffleId == contestants[i].raffleId) {
                refund += pricePerTicket;
                contestants[i] = Contestant(address(0), 0);
                gaps.push(i);
                TicketRefund(raffleId, msg.sender, i);
            }
        }

        if (refund > 0) {
            msg.sender.transfer(refund);
        }
    }

    // Refund everyone's money, start a new raffle, then pause it
    function endRaffle() public {
        if (msg.sender == feeAddress) {
            paused = true;

            for (uint i = 0; i < totalTickets; i++) {
                if (raffleId == contestants[i].raffleId) {
                    TicketRefund(raffleId, contestants[i].addr, i);
                    contestants[i].addr.transfer(pricePerTicket);
                }
            }

            RaffleResult(raffleId, totalTickets, address(0), address(0), address(0), 0, 0);
            raffleId++;
            nextTicket = 0;
            // <yes> <report> BAD_RANDOMNESS
            blockNumber = block.number;
            gaps.length = 0;
        }
    }

    function togglePause() public {
        if (msg.sender == feeAddress) {
            paused = !paused;
        }
    }

    function kill() public {
        if (msg.sender == feeAddress) {
            selfdestruct(feeAddress);
        }
    }
}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. **BAD_RANDOMNESS**
   - **Description:** The randomness used to select winners is manipulated by block variables and external addresses, making it predictable.
   - **Impact:** Attackers can predict the raffle outcome and manipulate their chances of winning.
   
2. **REENTRANCY**
   - **Description:** Multiple external calls (e.g., `transfer`) within the `buyTickets`, `chooseWinner`, and `getRefund` functions can be exploited by reentrancy attacks.
   - **Impact:** An attacker could repeatedly call a function before the state update, resulting in multiple undesired withdrawals.
   
3. **ACCESS_CONTROL**
   - **Description:** Only the `feeAddress` can pause the contract, end the raffle, or kill it. If this address is compromised, the attacker gains full control.
   - **Impact:** Unauthorized access to critical functions can lead to manipulation of the raffle flow or theft of funds.
   
4. **TIME_DEPENDENCY**
   - **Description:** The contract logic relies on block timing and `block.difficulty` for randomness and state transitions.
   - **Impact:** Miners or attackers can influence the block characteristics to manipulate the raffle outcome or contract logic.
   
5. **MONEY_FLOW**
   - **Description:** The fixed prize and fee structure, along with the total ticket count, create predictability in value transfers.
   - **Impact:** Attackers can calculate the optimal ticket purchase strategy or manipulate refunds to gain an advantage.

================================================================================
EXPLOIT DETAILS
================================================================================
1. **Reentrancy in `getRefund`**
   - **Exploit Flow:**
     1. Contestant A calls `getRefund` before the raffle is drawn.
     2. The contract iterates through tickets and refunds them one by one.
     3. If the transfer call (`msg.sender.transfer`) is exploited, the contract can be re-entered.
   - **Impact:** Contestant A could repeatedly withdraw funds, draining the contract balance.
   
2. **Reentrancy in `chooseWinner`**
   - **Exploit Flow:**
     1. The function attempts to transfer the prize and fee simultaneously.
     2. If an attacker controls the winning address, they can re-enter the function to receive multiple prizes.
   - **Impact:** An attacker could exploit reentrancy to claim multiple winnings.
   
3. **`selfdestruct` in `kill` Function**
   - **Exploit Flow:**
     1. The `kill` function allows the owner to self-destruct the contract.
     2. If the owner address is compromised, an attacker can call this function to remove all funds.
   - **Impact:** Complete loss of contract funds.
   
4. **Bad Randomness in `chooseWinner`**
   - **Exploit Flow:**
     1. The randomness for selecting a winner is based on block attributes and external inputs.
     2. An attacker can predict these values and manipulate the winner selection.
   - **Impact:** Unfair raffle outcomes; attackers can ensure they win by manipulating inputs.
   
5. **Oracle Manipulation (Fortify Against Price Change Exploits)**
   - **Exploit Flow:**
     1. The raffle relies on a fixed ticket price based on the prize and fee.
     2. If an attacker can influence ticket pricing, they can manipulate the raffle outcome.
   - **Impact:** Unstable raffle behavior; potential undervaluation or overvaluation of tickets.
