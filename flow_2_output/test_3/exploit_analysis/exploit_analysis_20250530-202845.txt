Exploit Analysis Report
Generated At: 2025-05-30 20:28:45

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
/*
 * @source: https://github.com/SmartContractSecurity/SWC-registry/blob/master/test_cases/solidity/unprotected_critical_functions/multiowned_vulnerable/multiowned_vulnerable.sol
 * @author: -
 * @vulnerable_at_lines: 38
 */

pragma solidity ^0.4.23;

/**
 * @title MultiOwnable
 */
contract MultiOwnable {
  address public root;
  mapping (address => address) public owners; // owner => parent of owner

  /**
  * @dev The Ownable constructor sets the original `owner` of the contract to the sender
  * account.
  */
  constructor() public {
    root = msg.sender;
    owners[root] = root;
  }

  /**
  * @dev Throws if called by any account other than the owner.
  */
  modifier onlyOwner() {
    require(owners[msg.sender] != 0);
    _;
  }

  /**
  * @dev Adding new owners
  * Note that the "onlyOwner" modifier is missing here.
  */
  // <yes> <report> ACCESS_CONTROL
  function newOwner(address _owner) external returns (bool) {
    require(_owner != 0);
    owners[_owner] = msg.sender;
    return true;
  }

  /**
    * @dev Deleting owners
    */
  function deleteOwner(address _owner) onlyOwner external returns (bool) {
    require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));
    owners[_owner] = 0;
    return true;
  }
}

contract TestContract is MultiOwnable {

  function withdrawAll() onlyOwner {
    msg.sender.transfer(this.balance);
  }

  function() payable {
  }
}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. Access Control Issues:
   - The `newOwner` function allows anyone to add new owners without proper authorization checks.
   - This can lead to unauthorized access to critical functions by newly added owners.

2. Reentrancy Vulnerability:
   - The `withdrawAll` function transfers the contract's balance to `msg.sender` without enforcing reentrancy protection. 
   - An attacker could exploit this to repeatedly call `withdrawAll` before the balance is updated, leading to multiple withdrawals.

3. Inadequate Owner Deletion Checks:
   - The `deleteOwner` function allows an owner to delete another owner, but it also permits the root owner to delete any owner.
   - This could be abused if the root owner is compromised or manipulated.

================================================================================
EXPLOIT DETAILS
================================================================================
1. **Access Control Issue:**
   - **Exploit Vector:** `newOwner` function
   - **Description:** Anyone can call `newOwner` to add themselves as an owner. Since there is no `onlyOwner` check in this function, it is vulnerable to privilege escalation.

2. **Reentrancy Vulnerability in `withdrawAll`:**
   - **Exploit Vector:** `msg.sender.transfer(this.balance)`
   - **Description:** The `withdrawAll` function does not protect against reentrancy. An attacker can exploit this to drain funds by repeatedly calling `withdrawAll` before the contract state is updated.

3. **Owner Deletion Exploit:**
   - **Exploit Vector:** `deleteOwner` function
   - **Description:** An owner can delete another owner without stringent checks, and the root owner can delete any owner. If attackers gain root access, they can remove all owners and take full control.
