Exploit Analysis Report
Generated At: 2025-05-30 21:44:19

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
pragma solidity ^0.4.2;

contract OddsAndEvens{

  struct Player {
    address addr;
    uint number;
  }

  Player[2] public players;         //public only for debug purpose

  uint8 tot;
  address owner;

  function OddsAndEvens() {
    owner = msg.sender;
  }
// <yes> <report> FRONT_RUNNING
  function play(uint number) payable{
    if (msg.value != 1 ether) throw;
    // <yes> <report> FRONT_RUNNING
    players[tot] = Player(msg.sender, number);
    tot++;

    if (tot==2) andTheWinnerIs();
  }

  function andTheWinnerIs() private {
    bool res ;
    uint n = players[0].number+players[1].number;
    if (n%2==0) {
      res = players[0].addr.send(1800 finney);
    }
    else {
      res = players[1].addr.send(1800 finney);
    }

    delete players;
    tot=0;
  }

  function getProfit() {
    if(msg.sender!=owner) throw;
    bool res = msg.sender.send(this.balance);
  }

}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. **Front-Running**: The `play` function allows an attacker to front-run the transaction and manipulate the game flow. 
2. **Access Control**: The `getProfit` function can only be called by the owner, but no modifiers are used to enforce this access control. 
3. **Race Condition**: The `andTheWinnerIs` function does not properly handle state changes before sending funds, which may lead to an inconsistent state if the send fails.

================================================================================
EXPLOIT DETAILS
================================================================================
1. **Front-Running Attack**: An attacker can observe the `play` transaction and submit their own transaction with the same value to manipulate the game outcome. 
2. **Race Condition in `andTheWinnerIs`**: The function sends funds to a player without first ensuring the state is consistent. A failed send could leave the contract in an inconsistent state without resetting `tot` and `players`. 
3. **Access Control Flaw in `getProfit`**: Although it checks if the sender is the owner, it does not properly restrict access to sensitive functions.
