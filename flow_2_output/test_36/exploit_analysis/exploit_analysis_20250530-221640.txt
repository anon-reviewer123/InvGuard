Exploit Analysis Report
Generated At: 2025-05-30 22:16:40

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
pragma solidity ^0.4.0;
contract SendBack {
    mapping (address => uint) userBalances;
    function withdrawBalance() {  
		uint amountToWithdraw = userBalances[msg.sender];
		userBalances[msg.sender] = 0;
        // <yes> <report> UNCHECKED_LL_CALLS
		msg.sender.send(amountToWithdraw);
	}
}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. UNCHECKED_LL_CALLS: Possible withdrawal without updating user balance.
2. REENTRANCY: Attack vulnerability due to unchecked external call before state update.

================================================================================
EXPLOIT DETAILS
================================================================================
1. **Exploit Overview:** The contract allows users to withdraw balances without proper checks, making it vulnerable to reentrancy attacks.

2. **Step-by-Step Attack Scenario:**
   - An attacker funds the contract and then calls `withdrawBalance()`.
   - The contract sets `userBalances[msg.sender]` to `0` before performing an external call to `send()`, allowing the attacker to re-enter and drain funds.
   - **Exploit Flow:**
     1. Attacker initiates withdrawal.
     2. Contract sends funds via `msg.sender.send()`. 
     3. Attacker re-enters `withdrawBalance()` before state update.

3. **Potential Impact Assessment:**
   - The entire contract balance could be drained by a reentrancy attack.
   - **Impact on Invariants:** 
     - Violation of balance consistency.
     - Possible infinite loop due to reentrant calls.
