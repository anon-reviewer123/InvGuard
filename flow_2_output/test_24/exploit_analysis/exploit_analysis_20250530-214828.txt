Exploit Analysis Report
Generated At: 2025-05-30 21:48:28

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
pragma solidity ^0.4.10;

contract EtherStore {

    uint256 public withdrawalLimit = 1 ether;
    mapping(address => uint256) public lastWithdrawTime;
    mapping(address => uint256) public balances;

    function depositFunds() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdrawFunds (uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(_weiToWithdraw <= withdrawalLimit);
        // limit the time allowed to withdraw
        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);
        // <yes> <report> REENTRANCY
        require(msg.sender.call.value(_weiToWithdraw)());
        balances[msg.sender] -= _weiToWithdraw;
        lastWithdrawTime[msg.sender] = now;
    }
}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. **Reentrancy**: The use of `call.value()` for sending Ether allows an attacker to recursively call `withdrawFunds` before the state is updated, leading to multiple withdrawals.

2. **Time Lock Bypass**: The contract relies on `lastWithdrawTime` to enforce a one-week gap between withdrawals, but this is vulnerable to manipulation or attack vectors that can bypass the time lock.

3. **Withdrawal Limit**: The `withdrawalLimit` is hardcoded to `1 ether`, which may not be suitable for all users and can be considered a weak limit if an attacker can exploit reentrancy.

4. **Check-Effects-Interactions Violation**: The contract updates the state after an external call, violating the check-effects-interactions pattern, which is essential for preventing reentrancy attacks.

================================================================================
EXPLOIT DETAILS
================================================================================
**Attack Scenario**:
1. An attacker deposits a small amount into the contract to establish a balance.
2. The attacker then initiates a withdrawal of the maximum allowed amount (`1 ether`).
3. Using reentrancy, the attacker recursively calls `withdrawFunds`, pulling out more funds than they originally deposited.
4. This exploit drains the contract's balance over multiple recursive calls.

**Potential Impact**:
- Total loss of funds in the contract due to repeated reentrant calls.
- Violation of the expected behavior of `withdrawFunds`, leading to user distrust and contract failure.

**Vulnerable Code Location**:
- `require(msg.sender.call.value(_weiToWithdraw)());` is the critical line enabling reentrancy. The state update (`balances[msg.sender] -= _weiToWithdraw;`) occurs after the external call, which is unsafe.
