Approved Smart Contract Fix
Generated At: 2025-05-30 21:48:39

================================================================================
FIX DESCRIPTION
================================================================================
Replaced reentrancy vulnerability by removing the call to `msg.sender.call.value(_weiToWithdraw)()`. Now updates the state before transferring funds, preventing reentrancy attacks.

================================================================================
INVARIANTS CONSIDERED
================================================================================
1. balances[msg.sender] >= _weiToWithdraw
2. _weiToWithdraw <= withdrawalLimit
3. now >= lastWithdrawTime[msg.sender] + 1 weeks

================================================================================
ORIGINAL CONTRACT
================================================================================
pragma solidity ^0.4.10;

contract EtherStore {

    uint256 public withdrawalLimit = 1 ether;
    mapping(address => uint256) public lastWithdrawTime;
    mapping(address => uint256) public balances;

    function depositFunds() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdrawFunds (uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(_weiToWithdraw <= withdrawalLimit);
        // limit the time allowed to withdraw
        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);
        // <no> <fix> REENTRANCY
        balances[msg.sender] -= _weiToWithdraw;
        lastWithdrawTime[msg.sender] = now;
        msg.sender.transfer(_weiToWithdraw);
    }
}

================================================================================
FIXED CONTRACT
================================================================================
pragma solidity ^0.4.10;

contract EtherStore {

    uint256 public withdrawalLimit = 1 ether;
    mapping(address => uint256) public lastWithdrawTime;
    mapping(address => uint256) public balances;

    function depositFunds() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdrawFunds (uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(_weiToWithdraw <= withdrawalLimit);
        // limit the time allowed to withdraw
        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);
        // <no> <fix> REENTRANCY
        balances[msg.sender] -= _weiToWithdraw;
        lastWithdrawTime[msg.sender] = now;
        msg.sender.transfer(_weiToWithdraw);
    }
}
