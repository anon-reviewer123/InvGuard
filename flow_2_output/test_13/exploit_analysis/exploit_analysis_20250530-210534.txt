Exploit Analysis Report
Generated At: 2025-05-30 21:05:34

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
pragma solidity ^0.4.24;

//Based on the the Capture the Ether challange at https://capturetheether.com/challenges/lotteries/predict-the-block-hash/
//Note that while it seems to have a 1/2^256 chance you guess the right hash, actually blockhash returns zero for blocks numbers that are more than 256 blocks ago so you can guess zero and wait.
contract PredictTheBlockHashChallenge {

    struct guess{
      uint block;
      bytes32 guess;
    }

    mapping(address => guess) guesses;

    constructor() public payable {
        require(msg.value == 1 ether);
    }

    function lockInGuess(bytes32 hash) public payable {
        require(guesses[msg.sender].block == 0);
        require(msg.value == 1 ether);

        guesses[msg.sender].guess = hash;
        guesses[msg.sender].block  = block.number + 1;
    }

    function settle() public {
        require(block.number > guesses[msg.sender].block);
        // <yes> <report> BAD_RANDOMNESS
        bytes32 answer = blockhash(guesses[msg.sender].block);

        guesses[msg.sender].block = 0;
        if (guesses[msg.sender].guess == answer) {
            msg.sender.transfer(2 ether);
        }
    }
}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. **Bad Randomness**: The contract uses `blockhash` as a source of randomness, which can be manipulated by miners or early block producers. This allows attackers to predict the block hash and exploit it to win the game.
2. **Time Dependency**: The `block.hash` function relies on the block's state, which can be influenced by miners. This creates a dependency on the block's execution context and can be exploited.
3. **Replay Attack**: An attacker could lock in a guess, wait for the block hash to stabilize, and then replay the same guess to win the wager again.
4. **Denial of Service (DoS)**: If the contract's balance is low or if it gets into a state where it cannot pay out (e.g., all funds locked), it could become non-functional for payouts.

================================================================================
EXPLOIT DETAILS
================================================================================
1. **Manipulation of Blockhash**: Miners can influence the block hash by reordering transactions or modifying the block content, leading to predictable outcomes.
2. **Early Block Exploitation**: An attacker could submit a guess and block the transaction to ensure their guess always matches the block hash.
3. **Guessing Zero**: Given the contract's logic, an attacker can wait for a block to be mined and then guess the hash of a block that is more than 256 blocks old to always get a win.
