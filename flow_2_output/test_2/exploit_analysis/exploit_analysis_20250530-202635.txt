Exploit Analysis Report
Generated At: 2025-05-30 20:26:35

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
pragma solidity ^0.4.24;

//This code is derived from the Capture the Ether https://capturetheether.com/challenges/math/mapping/

contract Map {
    address public owner;
    uint256[] map;

    function set(uint256 key, uint256 value) public {
        if (map.length <= key) {
            map.length = key + 1;
        }
        // <yes> <report> ACCESS_CONTROL
        map[key] = value;
    }

    function get(uint256 key) public view returns (uint256) {
        return map[key];
    }
    function withdraw() public{
      require(msg.sender == owner);
      msg.sender.transfer(address(this).balance);
    }
}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. **Access Control:** 
   - The `owner` variable is not initialized, allowing any user to execute the `withdraw` function.

2. **State Manipulation:** 
   - The `set` function allows any user to modify the `map` array, potentially leading to unauthorized data changes.

================================================================================
EXPLOIT DETAILS
================================================================================
1. **Exploit Overview:** 
   - An attacker can call the `set` function to alter any mapping entry, and the `withdraw` function can be exploited to transfer contract funds since `owner` is uninitialized.

2. **Step-by-Step Attack Scenario:** 
   - **Step 1:** Attacker calls `set` with a high key value to ensure the `map` array is resized.
   - **Step 2:** Attacker modifies critical mapping entries (if any exist) by repeatedly calling `set`.
   - **Step 3:** Attacker executes `withdraw`, knowing they can transfer the contract balance as `owner` is unset.

3. **Potential Impact Assessment:** 
   - Complete compromise of contract integrity and funds due to improper access control and state manipulation.
