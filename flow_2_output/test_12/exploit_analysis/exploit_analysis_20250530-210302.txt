Exploit Analysis Report
Generated At: 2025-05-30 21:03:02

================================================================================
ORIGINAL CONTRACT CODE
================================================================================
pragma solidity ^0.4.0;

contract Lottery {
    event GetBet(uint betAmount, uint blockNumber, bool won);

    struct Bet {
        uint betAmount;
        uint blockNumber;
        bool won;
    }

    address private organizer;
    Bet[] private bets;

    // Create a new lottery with numOfBets supported bets.
    function Lottery() {
        organizer = msg.sender;
    }

    // Fallback function returns ether
    function() {
        throw;
    }

    // Make a bet
    function makeBet() {
        // Won if block number is even
        // (note: this is a terrible source of randomness, please don't use this with real money)
        // <yes> <report> BAD_RANDOMNESS
        bool won = (block.number % 2) == 0;

        // Record the bet with an event
        // <yes> <report> BAD_RANDOMNESS
        bets.push(Bet(msg.value, block.number, won));

        // Payout if the user won, otherwise take their money
        if(won) {
            if(!msg.sender.send(msg.value)) {
                // Return ether to sender
                throw;
            }
        }
    }

    // Get all bets that have been made
    function getBets() {
        if(msg.sender != organizer) { throw; }

        for (uint i = 0; i < bets.length; i++) {
            GetBet(bets[i].betAmount, bets[i].blockNumber, bets[i].won);
        }
    }

    // Suicide :(
    function destroy() {
        if(msg.sender != organizer) { throw; }

        suicide(organizer);
    }
}

================================================================================
VULNERABILITIES FOUND
================================================================================
1. **Reentrancy**: The `makeBet` function allows external calls (e.g., `msg.sender.send(msg.value)`) that can be exploited for reentrancy attacks.
2. **Access Control**: Functions like `getBets` and `destroy` are only accessible by the `organizer`, but the check is performed using `msg.sender != organizer`, which might be bypassed.
3. **Randomness**: The lottery logic uses block number parity for randomness, which is predictable and insecure.
4. **Throw Usage**: `throw` is used for error handling, which can lead to ungraceful contract termination.
5. **Data Exposure**: The contract's bets data structure is publicly accessible without adequate protection.

================================================================================
EXPLOIT DETAILS
================================================================================
1. **Reentrancy Attack**: An attacker can repeatedly call the `makeBet` function to drain funds before the state is updated.
2. **Access Control Exploit**: Without proper modifier checks, an unauthorized user could gain access to `getBets` or `destroy` functions.
3. **Predictable Outcomes**: The lottery result based on `block.number % 2` is easily guessable, leading to non-random behavior.
4. **Contract Destruction**: The `destroy` function allows the organizer to self-destruct the contract, which can be exploited if the organizer's key is compromised.
