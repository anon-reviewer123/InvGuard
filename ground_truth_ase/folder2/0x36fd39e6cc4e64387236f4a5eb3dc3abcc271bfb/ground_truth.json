{
  "invariants": [
    {
      "name": "Total Supply Invariant",
      "description": "Sum of all balances equals totalSupply",
      "expression": "sum(balances) == totalSupply"
    },
    {
      "name": "Non-Negative Balances",
      "description": "No address has a negative balance",
      "expression": "forall addr: balances[addr] >= 0"
    },
    {
      "name": "Non-Negative Allowances",
      "description": "No allowance is negative",
      "expression": "forall (owner, spender): allowed[owner][spender] >= 0"
    },
    {
      "name": "Self-Transfer Valid",
      "description": "Transferring to self does not change balance",
      "expression": "transfer(addr, v) where addr == msg.sender => balances[addr] unchanged"
    },
    {
      "name": "Transfer Preservation",
      "description": "Transfer value is conserved between sender and recipient",
      "expression": "transfer(from, to, v) => balances[from] -= v && balances[to] += v"
    },
    {
      "name": "TransferFrom Preservation",
      "description": "transferFrom preserves total value and decreases allowance",
      "expression": "transferFrom(owner, to, v) => balances[owner] -= v && balances[to] += v && allowed[owner][msg.sender] -= v"
    },
    {
      "name": "Zero Allowance Reset Rule",
      "description": "ERC20 approve rule: only allow approve if previous allowance is 0 or new value is 0",
      "expression": "approve(spender, v) => (v == 0 || allowed[msg.sender][spender] == 0)"
    },
    {
      "name": "Overflow Check on Transfer",
      "description": "No overflow occurs when adding to recipient's balance",
      "expression": "balances[to] + value >= balances[to]"
    },
    {
      "name": "Overflow Check on TransferFrom",
      "description": "No overflow occurs on recipient balance in transferFrom",
      "expression": "balances[to] + value >= balances[to]"
    },
    {
      "name": "Ownership Initialization",
      "description": "Owner is set to deployer at contract creation",
      "expression": "constructor(...) => owner == msg.sender"
    },
    {
      "name": "Initial Supply Assignment",
      "description": "All tokens are assigned to owner on deployment",
      "expression": "constructor(...) => balances[owner] == totalSupply"
    }
  ]
}

