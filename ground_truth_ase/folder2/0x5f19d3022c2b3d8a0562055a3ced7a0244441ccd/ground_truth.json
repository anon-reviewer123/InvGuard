[
  {
    "name": "TotalSupplyEqualsSumOfBalances",
    "expression": "totalSupply == sum(balanceOf.values())",
    "description": "The sum of all account balances must always equal the total supply, unless tokens are burned."
  },
  {
    "name": "NoBalanceOverflow",
    "expression": "forall(a in balanceOf.keys()): balanceOf[a] <= totalSupply",
    "description": "No individual account balance should exceed the total supply."
  },
  {
    "name": "NoNegativeBalances",
    "expression": "forall(a in balanceOf.keys()): balanceOf[a] >= 0",
    "description": "All account balances must be non-negative."
  },
  {
    "name": "TransferPreservesTotalBalance",
    "expression": "in _transfer: before(balanceOf[_from] + balanceOf[_to]) == after(balanceOf[_from] + balanceOf[_to])",
    "description": "Internal transfers should not change the total of the two involved balances."
  },
  {
    "name": "AllowanceNonNegative",
    "expression": "forall(owner in allowance.keys()): forall(spender in allowance[owner].keys()): allowance[owner][spender] >= 0",
    "description": "All allowances must be non-negative values."
  },
  {
    "name": "TransferFromWithinAllowance",
    "expression": "transferFrom(_from, _to, _value): require(_value <= allowance[_from][msg.sender])",
    "description": "Transferred value via `transferFrom` must not exceed the spender's allowance."
  },
  {
    "name": "BurnReducesTotalSupply",
    "expression": "in burn: after(totalSupply) == before(totalSupply) - _value",
    "description": "Burning tokens must reduce the total supply by the burned amount."
  },
  {
    "name": "BurnFromReducesAllowance",
    "expression": "in burnFrom: after(allowance[_from][msg.sender]) == before(allowance[_from][msg.sender]) - _value",
    "description": "The allowance should decrease after `burnFrom` by the burned amount."
  },
  {
    "name": "TransferArrayIsSafe",
    "expression": "transferArray: require(_to.length == _value.length)",
    "description": "The transferArray function should ensure matching address and value arrays (this check is missing in the current code!)."
  },
  {
    "name": "NoTransferToZeroAddress",
    "expression": "in _transfer: require(_to != 0x0)",
    "description": "Transfers to the zero address are forbidden."
  }
]

