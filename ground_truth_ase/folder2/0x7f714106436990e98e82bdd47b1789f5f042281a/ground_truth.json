[
  {
    "description": "Total supply must equal sum of all balances and locked funds",
    "invariant": "totalSupply_ == sum(balances) + sum(all lockupInfo[].lockupBalance)"
  },
  {
    "description": "Only owner can mint new tokens",
    "invariant": "msg.sender == owner when calling mint"
  },
  {
    "description": "Only owner can burn tokens",
    "invariant": "msg.sender == owner when calling burn"
  },
  {
    "description": "No transfer to zero address",
    "invariant": "_to != address(0) in transfer and transferFrom"
  },
  {
    "description": "No approve to zero address",
    "invariant": "_spender != address(0) in approve, increaseAllowance, decreaseAllowance"
  },
  {
    "description": "Allowance must not underflow",
    "invariant": "allowed[_from][msg.sender] >= _value before transferFrom"
  },
  {
    "description": "Balance must not underflow",
    "invariant": "balances[_from] >= _value before transfer or transferFrom"
  },
  {
    "description": "Frozen accounts cannot send or receive tokens",
    "invariant": "!frozen[msg.sender] && !frozen[_from] in transfer and transferFrom"
  },
  {
    "description": "Paused contract cannot perform state-changing transfers",
    "invariant": "!paused in transfer, transferFrom, approve, mint, burn"
  },
  {
    "description": "Only owner can freeze/unfreeze accounts",
    "invariant": "msg.sender == owner in freezeAccount and unfreezeAccount"
  },
  {
    "description": "Locked tokens must be excluded from spendable balance",
    "invariant": "balanceOf(_holder) >= spendable + locked for accounts with locks"
  },
  {
    "description": "Lock release time must be in the future",
    "invariant": "_releaseStart >= now in lock"
  },
  {
    "description": "AutoUnlock should never increase locked amount",
    "invariant": "autoUnlock(_holder) does not increase lockupInfo[_holder][].lockupBalance"
  },
  {
    "description": "Only owner can call distribute and distributeWithLockup",
    "invariant": "msg.sender == owner in distribute and distributeWithLockup"
  },
  {
    "description": "Ownership must only be transferred through 2-step process",
    "invariant": "owner != newOwner after transferOwnership until acceptOwnership is called"
  },
  {
    "description": "TokenRecipient must be a contract in approveAndCall",
    "invariant": "isContract(_spender) == true in approveAndCall"
  },
  {
    "description": "Burn must reduce totalSupply_",
    "invariant": "totalSupply_ decreases by _value in burn"
  },
  {
    "description": "Mint must increase totalSupply_",
    "invariant": "totalSupply_ increases by _amount in mint"
  },
  {
    "description": "Unlock must decrease locked balance and increase spendable balance",
    "invariant": "lockupInfo[_holder][_idx].lockupBalance decreases and balances[_holder] increases after unlock"
  },
  {
    "description": "Lock and Unlock events must match actual state changes",
    "invariant": "emit Lock/Unlock must correspond to balances and lockupInfo state changes"
  }
]

