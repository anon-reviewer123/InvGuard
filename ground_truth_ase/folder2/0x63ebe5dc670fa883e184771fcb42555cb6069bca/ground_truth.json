[
  {
    "name": "totalSupplyConsistency",
    "condition": "sum(_balances) == _totalSupply",
    "description": "The sum of all account balances should always equal the total token supply."
  },
  {
    "name": "nonNegativeBalances",
    "condition": "∀ address a: _balances[a] >= 0",
    "description": "All account balances should be non-negative at all times."
  },
  {
    "name": "nonNegativeAllowances",
    "condition": "∀ address a, b: _allowed[a][b] >= 0",
    "description": "All allowance entries should remain non-negative."
  },
  {
    "name": "validTransferToAddress",
    "condition": "∀ transfers: to != 0x0",
    "description": "Transfers should not send tokens to the zero address."
  },
  {
    "name": "validTransferFromAddress",
    "condition": "∀ transfers: from != 0x0",
    "description": "Transfers should not originate from the zero address."
  },
  {
    "name": "transferRespectsBalance",
    "condition": "∀ transfers: value <= _balances[from]",
    "description": "No transfer should exceed the sender's balance."
  },
  {
    "name": "taxInvariant",
    "condition": "∀ taxedTransfers: tax = value * _taxRate / 10000; to receives value - tax; _taxBenefit receives tax",
    "description": "When tax is applied, correct tax is deducted and sent to the tax benefit address."
  },
  {
    "name": "burnOnlyByDevFund",
    "condition": "∀ burns: from == _devFund",
    "description": "Only the developer fund can burn tokens."
  },
  {
    "name": "burnReducesSupplyAndBalance",
    "condition": "∀ burns: _totalSupply and _balances[from] both decrease by 'value'",
    "description": "Burning tokens should decrease both the sender's balance and the total supply."
  },
  {
    "name": "allowanceReductionAfterTransferFrom",
    "condition": "∀ transferFrom: _allowed[from][msg.sender] -= value",
    "description": "Calling transferFrom must decrease the allowance by the transferred value."
  },
  {
    "name": "setTaxRateBounds",
    "condition": "0 <= _taxRate <= 10000",
    "description": "Tax rate must always be within the 0 to 10000 range (basis points)."
  },
  {
    "name": "devFundControlsTaxSettings",
    "condition": "Only _devFund can call setTaxRate or setTaxBenefit",
    "description": "Only the developer fund is authorized to change tax parameters."
  },
  {
    "name": "timestampOnTransfer",
    "condition": "_whenSent[from] = block.timestamp on transfer",
    "description": "Each transfer records the current timestamp in _whenSent for the sender."
  }
]

