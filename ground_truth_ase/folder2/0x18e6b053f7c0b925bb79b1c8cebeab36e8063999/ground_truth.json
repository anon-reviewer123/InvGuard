[
  {
    "invariant": "Total supply equals the sum of all user balances",
    "expression": "_totalSupply == sum(balances[a] for all a in balances)",
    "scope": "BTFToken",
    "importance": "high"
  },
  {
    "invariant": "Owner must always be non-zero address",
    "expression": "owner != address(0)",
    "scope": "Ownable",
    "importance": "high"
  },
  {
    "invariant": "No transfer should occur from or to blacklisted addresses",
    "expression": "!isBlackListed[_from] && !isBlackListed[_to]",
    "scope": "BlackList, BTFToken",
    "importance": "high"
  },
  {
    "invariant": "Blacklisted user balance is zero after destroyBlackFunds",
    "expression": "isBlackListed[a] implies balances[a] == 0",
    "scope": "BlackList",
    "importance": "medium"
  },
  {
    "invariant": "Allowance is always zero or must be set to zero before being changed",
    "expression": "(_value == 0) || (allowed[msg.sender][_spender] == 0)",
    "scope": "StandardToken::approve",
    "importance": "medium"
  },
  {
    "invariant": "Transfer fees do not exceed maximumFee",
    "expression": "(_value * basisPointsRate / 10000) <= maximumFee",
    "scope": "BasicToken, StandardToken",
    "importance": "medium"
  },
  {
    "invariant": "Paused contract disables ERC20 functions",
    "expression": "paused implies reject transfer, transferFrom, approve",
    "scope": "BTFToken::whenNotPaused",
    "importance": "high"
  },
  {
    "invariant": "Deprecated contracts forward all external ERC20 methods to upgradedAddress",
    "expression": "deprecated implies all ERC20 calls delegate to upgradedAddress",
    "scope": "BTFToken",
    "importance": "medium"
  },
  {
    "invariant": "Basis points must be less than 20 and max fee less than 50 tokens",
    "expression": "basisPointsRate < 20 && maximumFee < 50 * (10 ** decimals)",
    "scope": "BTFToken::setParams",
    "importance": "medium"
  },
  {
    "invariant": "Only owner can call owner-only functions",
    "expression": "msg.sender == owner",
    "scope": "Ownable",
    "importance": "high"
  },
  {
    "invariant": "Redeem only allowed if owner has sufficient tokens",
    "expression": "balances[owner] >= amount && _totalSupply >= amount",
    "scope": "BTFToken::redeem",
    "importance": "medium"
  },
  {
    "invariant": "SafeMath never overflows or underflows",
    "expression": "mul/div/add/sub all use SafeMath and revert on error",
    "scope": "SafeMath usage",
    "importance": "critical"
  }
]

