[
  {
    "name": "TotalSupplyAlwaysEqualsSumOfBalances",
    "description": "The sum of all balances should equal totalSupply unless tokens have been burned.",
    "appliesTo": ["StandardToken", "BasicToken", "LOVE"],
    "type": "global",
    "expression": "sum(balances.values()) + burnedTokens == totalSupply"
  },
  {
    "name": "SenderBalanceNeverNegative",
    "description": "No account balance should go negative after a transfer.",
    "appliesTo": ["transfer", "transferFrom", "burn"],
    "type": "postcondition",
    "expression": "balances[msg.sender] >= 0"
  },
  {
    "name": "ReceiverBalanceUpdatedCorrectly",
    "description": "Recipient's balance should increase by _value after a successful transfer.",
    "appliesTo": ["transfer", "transferFrom"],
    "type": "postcondition",
    "expression": "balances[_to] == balances[_to]_before + _value"
  },
  {
    "name": "AllowanceDecreasesAfterTransferFrom",
    "description": "Allowance for spender should decrease by _value after transferFrom.",
    "appliesTo": ["transferFrom"],
    "type": "postcondition",
    "expression": "allowed[_from][msg.sender] == allowed_before - _value"
  },
  {
    "name": "OnlyOwnerCanTransferOwnership",
    "description": "Only current owner can call transferOwnership.",
    "appliesTo": ["transferOwnership"],
    "type": "precondition",
    "expression": "msg.sender == owner"
  },
  {
    "name": "OwnerCannotBeZeroAddress",
    "description": "New owner must be a valid address (non-zero).",
    "appliesTo": ["transferOwnership"],
    "type": "precondition",
    "expression": "newOwner != address(0)"
  },
  {
    "name": "KillOnlyByOwner",
    "description": "The contract can only be killed by the owner.",
    "appliesTo": ["kill"],
    "type": "precondition",
    "expression": "msg.sender == owner"
  },
  {
    "name": "BurnDecreasesTotalSupply",
    "description": "Burning tokens must reduce both balance and totalSupply by _value.",
    "appliesTo": ["burn"],
    "type": "postcondition",
    "expression": "totalSupply == totalSupply_before - _value && balances[msg.sender] == balances_before - _value"
  },
  {
    "name": "ApproveOnlyIfResetOrZero",
    "description": "ERC20 approve should only succeed if setting to zero or resetting a previously set value.",
    "appliesTo": ["approve"],
    "type": "precondition",
    "expression": "_value == 0 || allowed[msg.sender][_spender] == 0"
  },
  {
    "name": "InitialSupplyCorrect",
    "description": "LOVE constructor should assign INITIAL_SUPPLY to deployer and totalSupply.",
    "appliesTo": ["LOVE"],
    "type": "constructor",
    "expression": "balances[msg.sender] == INITIAL_SUPPLY && totalSupply == INITIAL_SUPPLY"
  }
]

