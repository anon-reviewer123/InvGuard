{
  "ETHER3XBULL.sol": {
    "vulnerabilities": [
      "Access Control",
      "Authorization Bypass",
      "Arithmetic Overflow/Underflow",
      "Improper Allowance Usage",
      "Unrestricted Minting"
    ],
    "invariants": [
      {
        "description": "Only the designated owner should be allowed to execute sensitive administrative functions",
        "formal": "msg.sender == owner → allowed to call addAllow, mint, transferOwnership",
        "category": "Access Control"
      },
      {
        "description": "Allowances must not be bypassed even when allow[from] is set to true",
        "formal": "allowed[from][msg.sender] ≥ value ∧ allow[from] == true → transferFrom permitted",
        "category": "Authorization Bypass"
      },
      {
        "description": "Minting should not overwrite existing balances without proper accounting",
        "formal": "mint(miner, value) → balances[miner] == balances[miner]_prev + value",
        "category": "Unrestricted Minting"
      },
      {
        "description": "transfer and transferFrom must not cause underflows",
        "formal": "balances[msg.sender] ≥ value ∧ balances[msg.sender] - value ≥ 0",
        "category": "Arithmetic Overflow/Underflow"
      },
      {
        "description": "Allowance must be decremented appropriately after a transferFrom call",
        "formal": "allowed[from][msg.sender]_post == allowed[from][msg.sender]_prev - value",
        "category": "Improper Allowance Usage"
      },
      {
        "description": "Transfers must not occur to zero address",
        "formal": "_to != address(0)",
        "category": "Access Control"
      },
      {
        "description": "Ownership must not be transferred to zero address",
        "formal": "newOwner != address(0)",
        "category": "Access Control"
      },
      {
        "description": "Only authorized accounts should be added to the allowlist",
        "formal": "addAllow(holder, true) → msg.sender == owner",
        "category": "Access Control"
      }
    ]
  }
}

