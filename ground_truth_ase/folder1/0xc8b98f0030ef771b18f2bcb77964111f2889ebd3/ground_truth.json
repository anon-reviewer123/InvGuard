[
  {
    "condition": "_totalSupply == INITIAL_SUPPLY",
    "description": "Total supply must remain constant after deployment."
  },
  {
    "condition": "_updatedBalance[msg.sender] + _updatedBalance[to] remains constant during transfer unless ShortSqueeze modifies it",
    "description": "Token transfers preserve balance sum unless modified by the ShortSqueeze logic."
  },
  {
    "condition": "_updatedBalance[msg.sender] >= value",
    "description": "Sender must have enough balance for transfer."
  },
  {
    "condition": "_allowance[from][msg.sender] >= value",
    "description": "Allowance must be sufficient for transferFrom execution."
  },
  {
    "condition": "owner() == _owner",
    "description": "Public owner getter must reflect private _owner value."
  },
  {
    "condition": "_ownershipLocked == 1 implies owner cannot be transferred",
    "description": "Ownership cannot change if it is locked."
  },
  {
    "condition": "SqueezeOn == 1 implies that a transfer to Uniswap invokes ShortSqueeze logic",
    "description": "Short squeeze applies only if SqueezeOn is enabled and recipient is Uniswap."
  },
  {
    "condition": "Fee <= MaxFee",
    "description": "Fee must not exceed MaxFee during ShortSqueeze logic."
  },
  {
    "condition": "LastReward + NextReward == FuckValue",
    "description": "The fuck value must be correctly split into rewards."
  },
  {
    "condition": "_updatedBalance[LastBuyer] increases by LastReward after ShortSqueeze",
    "description": "LastBuyer should receive the correct reward portion from the squeeze."
  },
  {
    "condition": "_updatedBalance[NextVault] increases by NextReward after ShortSqueeze",
    "description": "NextVault should receive the correct reward portion from the squeeze."
  },
  {
    "condition": "BotList[caller] != 1",
    "description": "Blocked addresses (bots) cannot transfer or use transferFrom."
  },
  {
    "condition": "NextVault != address(0)",
    "description": "NextVault must be set before any transfer from Uniswap occurs."
  },
  {
    "condition": "_updatedBalance[NextVault] >= Nextbal before subtracting it",
    "description": "Vault must have enough balance for squeeze transfer."
  },
  {
    "condition": "LastBuyer != address(0) before emitting reward transfer to LastBuyer",
    "description": "ShortSqueeze should not emit reward transfer to zero address."
  }
]

