{
  "EBULL.sol": {
    "vulnerabilities": ["Access Control", "Arithmetic Safety", "Blacklist Enforcement", "Economic Soundness", "Price Oracle Trust", "Reentrancy (potential)"],
    "invariants": [
      {
        "description": "Only the owner can modify fee settings, rebalance flags, leverage parameters, and critical addresses.",
        "formal": "forall f in {setEnablefee, setTransfee, setCollector, setEnableReb, setLevUp, setLevDown, setDLimit, InitialETHPrice, setPairUSD, InputUniLP}: onlyOwner(f)",
        "category": "Access Control"
      },
      {
        "description": "Blacklist logic must block transactions from blacklisted addresses.",
        "formal": "require(blacklist[msg.sender] != 1) holds before transfer and transferFrom",
        "category": "Blacklist Enforcement"
      },
      {
        "description": "Total supply must always equal the sum of all updated balances.",
        "formal": "sum(_updatedBalance[a] for all a) == _totalSupply",
        "category": "Economic Soundness"
      },
      {
        "description": "Collector address must receive the exact transaction fee if fees are enabled.",
        "formal": "if EnableFee == 1 then _updatedBalance[Collector] += Fee% of value",
        "category": "Economic Soundness"
      },
      {
        "description": "No integer overflow or underflow should occur in any arithmetic operation.",
        "formal": "All SafeMath operations succeed without revert",
        "category": "Arithmetic Safety"
      },
      {
        "description": "Price fetched from Uniswap must be valid and non-zero before rebalance logic runs.",
        "formal": "getPriceETH_USD() > 0 before ReBalance()",
        "category": "Price Oracle Trust"
      },
      {
        "description": "Rebalance logic must not increase or decrease supply more than permitted by DLimit.",
        "formal": "Downside change percentage <= DLimit",
        "category": "Economic Soundness"
      },
      {
        "description": "Ownership cannot be transferred once lockOwnership() is called.",
        "formal": "_ownershipLocked == 1 â‡’ transferOwnership is permanently disallowed",
        "category": "Access Control"
      },
      {
        "description": "Rebalance cannot be triggered unless EnableReb == 1.",
        "formal": "require(EnableReb == 1) before ReBalance()",
        "category": "Access Control / Logic Flow"
      },
      {
        "description": "ERC-20 transfer and approve behaviors must remain compliant.",
        "formal": "transfer, transferFrom, approve satisfy ERC20 expected state transitions",
        "category": "Standard Compliance"
      }
    ]
  }
}

