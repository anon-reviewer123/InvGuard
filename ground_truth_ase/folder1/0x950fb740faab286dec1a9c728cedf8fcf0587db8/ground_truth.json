[
  {
    "invariant": "totalSupply equals the sum of all balances",
    "expression": "totalSupply == Σ(balanceOf[a]) for all addresses a",
    "type": "safety",
    "scope": "global"
  },
  {
    "invariant": "No address can have a negative balance",
    "expression": "∀ a: balanceOf[a] >= 0",
    "type": "safety",
    "scope": "per-account"
  },
  {
    "invariant": "Allowance must not be negative",
    "expression": "∀ a, b: allowance[a][b] >= 0",
    "type": "safety",
    "scope": "per-account"
  },
  {
    "invariant": "Transfers do not create or destroy tokens",
    "expression": "balanceOf[_from] + balanceOf[_to] remains constant after _transfer",
    "type": "conservation",
    "scope": "_transfer"
  },
  {
    "invariant": "Sender must have enough balance to transfer",
    "expression": "∀ transfer: balanceOf[sender] >= _value",
    "type": "precondition",
    "scope": "transfer, _transfer"
  },
  {
    "invariant": "transferFrom must not exceed approved allowance",
    "expression": "∀ transferFrom: _value <= allowance[_from][msg.sender]",
    "type": "precondition",
    "scope": "transferFrom"
  },
  {
    "invariant": "burn reduces both balance and totalSupply by _value",
    "expression": "balanceOf[sender] -= _value && totalSupply -= _value",
    "type": "state-change",
    "scope": "burn"
  },
  {
    "invariant": "burnFrom reduces both balance, allowance, and totalSupply by _value",
    "expression": "balanceOf[_from] -= _value && allowance[_from][msg.sender] -= _value && totalSupply -= _value",
    "type": "state-change",
    "scope": "burnFrom"
  },
  {
    "invariant": "Initial totalSupply is assigned to contract creator",
    "expression": "balanceOf[creator] == totalSupply at deployment",
    "type": "initialization",
    "scope": "constructor"
  },
  {
    "invariant": "approve sets allowance explicitly",
    "expression": "allowance[sender][_spender] == _value",
    "type": "assignment",
    "scope": "approve"
  }
]

