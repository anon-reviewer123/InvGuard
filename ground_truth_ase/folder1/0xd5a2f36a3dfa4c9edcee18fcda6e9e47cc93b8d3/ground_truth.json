[
  {
    "invariant": "Total supply consistency",
    "expression": "sum(_balances.values()) == totalSupply",
    "description": "The sum of all account balances must always equal the total token supply."
  },
  {
    "invariant": "Non-negative balances",
    "expression": "forall(address in _balances) => _balances[address] >= 0",
    "description": "No account can have a negative balance."
  },
  {
    "invariant": "Non-negative allowances",
    "expression": "forall((owner, spender) in _allowed) => _allowed[owner][spender] >= 0",
    "description": "All allowance values must be non-negative."
  },
  {
    "invariant": "Valid transfer event",
    "expression": "emit Transfer(from, to, value) iff (_balances[to] increased by value and _balances[from] decreased by value)",
    "description": "A Transfer event must only be emitted if token balances are correctly updated."
  },
  {
    "invariant": "Valid approval event",
    "expression": "emit Approval(owner, spender, value) iff (_allowed[owner][spender] == value)",
    "description": "An Approval event must only be emitted when allowance is updated to the specified value."
  },
  {
    "invariant": "Transfer only to valid address",
    "expression": "require(to != 0x0)",
    "description": "Cannot transfer tokens to the zero address."
  },
  {
    "invariant": "Approve only to/from valid address",
    "expression": "require(owner != 0x0 && spender != 0x0)",
    "description": "Cannot approve tokens to/from the zero address."
  },
  {
    "invariant": "transferFrom respects allowance",
    "expression": "_allowed[from][msg.sender] >= value before transferFrom, _allowed[from][msg.sender] == previous - value after",
    "description": "`transferFrom` can only succeed if allowance is sufficient and gets updated correctly."
  },
  {
    "invariant": "Constructor mints total supply to _ANT",
    "expression": "_balances[_ANT] == totalSupply at constructor end",
    "description": "Entire supply is allocated to the _ANT address on deployment."
  },
  {
    "invariant": "SafeMath prevents overflows/underflows",
    "expression": "All arithmetic uses SafeMath",
    "description": "All arithmetic operations are overflow/underflow safe via the SafeMath library."
  }
]

