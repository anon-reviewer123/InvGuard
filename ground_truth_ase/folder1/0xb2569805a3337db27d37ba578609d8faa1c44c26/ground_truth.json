[
  {
    "invariant": "Total supply equals the sum of all balances including zero address",
    "expression": "_totalSupply == sum(balances[a] for all a in addresses)"
  },
  {
    "invariant": "Total circulating supply equals total supply minus zero address balance",
    "expression": "totalSupply() == _totalSupply - balances[address(0)]"
  },
  {
    "invariant": "No balance is ever negative",
    "expression": "for all a in addresses: balances[a] >= 0"
  },
  {
    "invariant": "No allowance is ever negative",
    "expression": "for all (owner, spender) in addresses x addresses: allowed[owner][spender] >= 0"
  },
  {
    "invariant": "Transfer must preserve total balance",
    "expression": "For transfer(from, to, tokens): balances[from] + balances[to] remains constant (except address(0))"
  },
  {
    "invariant": "Only approved amount can be transferred using transferFrom",
    "expression": "allowed[from][msg.sender] >= tokens in transferFrom"
  },
  {
    "invariant": "On transfer or transferFrom, a Transfer event must be emitted",
    "expression": "Transfer event emitted with correct from, to, and tokens"
  },
  {
    "invariant": "On approve, the Approval event must be emitted",
    "expression": "Approval event emitted with correct owner, spender, and value"
  },
  {
    "invariant": "Decimals remain constant after deployment",
    "expression": "decimals == 18"
  },
  {
    "invariant": "Initial total supply is assigned entirely to the deployer",
    "expression": "balances[msg.sender at constructor] == _totalSupply"
  }
]

