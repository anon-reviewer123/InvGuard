{
  "invariants": [
    {
      "name": "Total Supply Constant",
      "expression": "_totalSupply == 1000",
      "description": "The total supply should remain 1000 throughout the contract's life."
    },
    {
      "name": "Sum of Balances Equals Total Supply",
      "expression": "sum(balances[a] for all a) == _totalSupply",
      "description": "Sum of all balances across all addresses must always equal the total supply."
    },
    {
      "name": "Zero Address Balance Excluded from Total Supply",
      "expression": "totalSupply() == _totalSupply - balances[0x0]",
      "description": "The zero address balance is subtracted from total supply as per ERC-20 standard."
    },
    {
      "name": "Transfer Balance Conservation",
      "expression": "balances[sender] + balances[receiver] is unchanged after transfer(sender, receiver, x)",
      "description": "No tokens are created or destroyed in transfer; only moved."
    },
    {
      "name": "TransferFrom Balance and Allowance Conservation",
      "expression": "balances[from] + balances[to] is unchanged && allowed[from][spender] decreases by tokens",
      "description": "TransferFrom must respect both balances and allowances."
    },
    {
      "name": "Approval Updates Allowance",
      "expression": "approve(spender, x) ⇒ allowed[msg.sender][spender] == x",
      "description": "Calling approve sets the allowance correctly."
    },
    {
      "name": "Transfer Emits Event",
      "expression": "transfer(...) ⇒ emits Transfer(from, to, tokens)",
      "description": "Every successful transfer must emit a Transfer event."
    },
    {
      "name": "Approval Emits Event",
      "expression": "approve(...) ⇒ emits Approval(owner, spender, tokens)",
      "description": "Every successful approve must emit an Approval event."
    },
    {
      "name": "Fallback Reverts",
      "expression": "fallback() ⇒ revert",
      "description": "Contract should reject any incoming ETH."
    },
    {
      "name": "Non-negative Balances and Allowances",
      "expression": "balances[a] >= 0 && allowed[a][b] >= 0 for all addresses a, b",
      "description": "Balances and allowances must always remain non-negative."
    }
  ]
}

