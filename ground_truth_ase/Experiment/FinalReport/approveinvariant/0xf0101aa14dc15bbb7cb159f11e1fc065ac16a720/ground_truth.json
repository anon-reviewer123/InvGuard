{
  "invariants": [
    {
      "name": "Total Supply Constant After Deployment",
      "expression": "_totalSupply == 100000000000",
      "description": "The total supply should remain constant after deployment, as no mint or burn functions are provided."
    },
    {
      "name": "Balance Sum Equals Total Supply",
      "expression": "sum(balances[a] for all a) == _totalSupply",
      "description": "The sum of all account balances (excluding the zero address) must equal the total token supply."
    },
    {
      "name": "Non-Negative Balances",
      "expression": "for all a: balances[a] >= 0",
      "description": "No account should have a negative balance at any point."
    },
    {
      "name": "Transfer Updates Balances Correctly",
      "expression": "balances[to] == old(balances[to]) + tokens && balances[msg.sender] == old(balances[msg.sender]) - tokens",
      "description": "A successful transfer must reduce the sender’s balance and increase the receiver’s balance by the same amount."
    },
    {
      "name": "TransferFrom Updates Allowance Correctly",
      "expression": "allowed[from][msg.sender] == old(allowed[from][msg.sender]) - tokens",
      "description": "A successful `transferFrom` call must decrease the spender's allowance."
    },
    {
      "name": "Only Approved Amount Can Be Transferred",
      "expression": "tokens <= allowed[from][msg.sender]",
      "description": "The caller can only transfer an amount up to the allowed limit."
    },
    {
      "name": "No Ether Accepted",
      "expression": "contract does not accept Ether",
      "description": "The fallback function always reverts, ensuring no ETH can be received by mistake."
    },
    {
      "name": "Zero Address Cannot Receive Tokens",
      "expression": "to != address(0)",
      "description": "Tokens should not be transferred to the zero address except during initial supply allocation (can be relaxed)."
    },
    {
      "name": "Approve Emits Approval Event",
      "expression": "Approval event emitted with correct parameters",
      "description": "`approve()` must emit an Approval event reflecting the latest allowance set."
    },
    {
      "name": "Transfer Emits Transfer Event",
      "expression": "Transfer event emitted with correct parameters",
      "description": "Any token movement should emit a `Transfer` event."
    }
  ]
}

