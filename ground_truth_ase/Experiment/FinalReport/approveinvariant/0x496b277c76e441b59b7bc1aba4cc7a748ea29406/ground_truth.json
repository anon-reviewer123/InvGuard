{
  "contract": "ismToken",
  "vulnerabilities": [
    "Access Control",
    "Blacklisting",
    "Reentrancy",
    "Arithmetic Overflow",
    "Deprecated Logic Bypass",
    "Pause Misuse"
  ],
  "invariants": [
    {
      "description": "Only the owner should be allowed to mint (issue) new tokens.",
      "formal": "msg.sender == owner ⇒ issue(amount)",
      "category": "Access Control"
    },
    {
      "description": "Only the owner can pause or unpause the contract.",
      "formal": "msg.sender == owner ⇒ pause(), unpause()",
      "category": "Access Control"
    },
    {
      "description": "Paused state must block token transfers and approvals.",
      "formal": "paused == true ⇒ reject transfer/transferFrom/approve calls",
      "category": "Pause Misuse"
    },
    {
      "description": "Blacklisted users must not be allowed to transfer tokens.",
      "formal": "isBlackListed[msg.sender] == false ⇒ transfer() allowed",
      "category": "Blacklisting"
    },
    {
      "description": "Blacklisted users' funds must be destroyed only by the owner.",
      "formal": "msg.sender == owner ∧ isBlackListed[user] == true ⇒ destroyBlackFunds(user)",
      "category": "Blacklisting"
    },
    {
      "description": "totalSupply must equal the sum of all user balances after issue/redeem.",
      "formal": "totalSupply == Σ balances[user]",
      "category": "Arithmetic/Accounting Integrity"
    },
    {
      "description": "basisPointsRate and maximumFee must remain within hard-coded bounds.",
      "formal": "basisPointsRate < 20 ∧ maximumFee < 50 * 10^decimals",
      "category": "Fee Misconfiguration"
    },
    {
      "description": "Fallback to upgraded contract must be conditional on deprecation flag.",
      "formal": "deprecated == true ⇒ forward to upgradedAddress",
      "category": "Deprecated Logic Bypass"
    },
    {
      "description": "approve must follow ERC20 race-condition safety: approve(x) after approve(0).",
      "formal": "allowed[msg.sender][_spender] == 0 ∨ _value == 0",
      "category": "ERC20 Compliance / Race Condition"
    },
    {
      "description": "Arithmetic operations on balances and totalSupply must not overflow.",
      "formal": "∀ op ∈ {add, sub, mul}: assertSafeMath(op)",
      "category": "Arithmetic Overflow/Underflow"
    }
  ]
}

