{
  "TosDis.sol": {
    "vulnerabilities": ["Arithmetic", "Access Control", "ERC20 Compliance"],
    "invariants": [
      {
        "description": "Total token supply must equal the sum of all non-zero account balances plus the zero address balance",
        "formal": "totalSupply == sum(balances) - balances[address(0)]",
        "category": "ERC20 Compliance"
      },
      {
        "description": "Token transfers must preserve total supply",
        "formal": "beforeTotal == afterTotal",
        "category": "Arithmetic"
      },
      {
        "description": "User balance must never go negative after transfer",
        "formal": "balances[msg.sender] >= tokens",
        "category": "Arithmetic"
      },
      {
        "description": "User cannot spend more than their approved allowance in transferFrom",
        "formal": "allowed[from][msg.sender] >= tokens",
        "category": "Access Control"
      },
      {
        "description": "Approve function must update allowance accurately",
        "formal": "allowed[msg.sender][spender] == tokens after approve()",
        "category": "Access Control"
      },
      {
        "description": "Only the constructor should set initial supply and owner balance",
        "formal": "balances[msg.sender] == _totalSupply only during constructor",
        "category": "Access Control"
      },
      {
        "description": "Arithmetic operations must not overflow or underflow",
        "formal": "safeAdd, safeSub, safeMul, safeDiv must not revert",
        "category": "Arithmetic"
      },
      {
        "description": "ERC20 Transfer event must match the actual transfer",
        "formal": "emit Transfer(from, to, tokens) matches balances change",
        "category": "ERC20 Compliance"
      }
    ]
  }
}

