{
  "invariants": [
    {
      "name": "Total Supply Conservation",
      "description": "The sum of all balances should equal the total supply minus tokens at address(0).",
      "expression": "sum(balances) == _totalSupply - balances[address(0)]"
    },
    {
      "name": "Non-Negative Balances",
      "description": "No account should ever have a negative balance.",
      "expression": "forall(account in balances): balances[account] >= 0"
    },
    {
      "name": "Non-Negative Allowances",
      "description": "No allowance should be negative.",
      "expression": "forall(owner in allowed): forall(spender in allowed[owner]): allowed[owner][spender] >= 0"
    },
    {
      "name": "Allowance Consistency on transferFrom",
      "description": "Allowance should decrease by the exact amount of tokens transferred in transferFrom.",
      "expression": "allowed[from][msg.sender]_before - tokens == allowed[from][msg.sender]_after"
    },
    {
      "name": "Balance Decrease Matches Transfer",
      "description": "Sender's balance should decrease by exactly the transferred amount.",
      "expression": "balances[msg.sender]_before - tokens == balances[msg.sender]_after"
    },
    {
      "name": "Balance Increase Matches Transfer",
      "description": "Recipient's balance should increase by exactly the transferred amount.",
      "expression": "balances[to]_after == balances[to]_before + tokens"
    },
    {
      "name": "Initial Distribution to Creator",
      "description": "At deployment, creator receives the full total supply.",
      "expression": "balances[creator] == _totalSupply"
    },
    {
      "name": "Zero Address Cannot Hold Tokens",
      "description": "The balance of the zero address should only increase via burns and be excluded from total supply.",
      "expression": "balances[address(0)] >= 0"
    },
    {
      "name": "Approval Emits Event",
      "description": "Every call to approve must emit an Approval event with correct values.",
      "expression": "Approval(msg.sender, spender, tokens) is emitted"
    },
    {
      "name": "Transfer Emits Event",
      "description": "Every call to transfer or transferFrom must emit a Transfer event with correct values.",
      "expression": "Transfer(from, to, tokens) is emitted"
    }
  ]
}

