{
  "TokenERC20.sol": {
    "vulnerabilities": ["Arithmetic", "Access Control", "ERC20 Semantics"],
    "invariants": [
      {
        "description": "Sender must have sufficient balance before transferring tokens.",
        "formal": "require(balanceOf[_from] >= _value)",
        "category": "Arithmetic"
      },
      {
        "description": "Sum of balances before and after transfer must remain constant (no inflation or deflation).",
        "formal": "balanceOf[_from] + balanceOf[_to] == previousBalances",
        "category": "Arithmetic"
      },
      {
        "description": "Recipient address must not be the zero address during token transfer.",
        "formal": "_to != 0x0",
        "category": "ERC20 Semantics"
      },
      {
        "description": "Allowance must not be exceeded in transferFrom or burnFrom.",
        "formal": "require(_value <= allowance[_from][msg.sender])",
        "category": "Access Control"
      },
      {
        "description": "Only token holders can burn their own tokens, and only if they have enough balance.",
        "formal": "require(balanceOf[msg.sender] >= _value)",
        "category": "Access Control"
      },
      {
        "description": "Total supply must be correctly reduced during burning operations.",
        "formal": "totalSupply == totalSupply_pre - _value",
        "category": "Arithmetic"
      },
      {
        "description": "Integer overflow should not occur in balance addition during _transfer.",
        "formal": "balanceOf[_to] + _value > balanceOf[_to]",
        "category": "Arithmetic"
      }
    ]
  }
}

