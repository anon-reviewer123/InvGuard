{
  "ETFtoken.sol": {
    "vulnerabilities": [
      "Access Control",
      "Arithmetic Safety",
      "Minting Policy",
      "ERC20 Consistency"
    ],
    "invariants": [
      {
        "description": "Only the contract owner can mint new tokens using the `mint()` function",
        "formal": "msg.sender == owner => mint(to, amount)",
        "category": "Access Control"
      },
      {
        "description": "`mintByETF()` can only be called by the address stored in `mintable`",
        "formal": "msg.sender == mintable => mintByETF(to, amount)",
        "category": "Access Control"
      },
      {
        "description": "Total supply must never exceed 2.1 million tokens",
        "formal": "_totalSupply <= 2100000 ether",
        "category": "Minting Policy"
      },
      {
        "description": "Token transfers and approvals must not cause integer overflows or underflows",
        "formal": "forall a, b: sub(a,b) >= 0 and add(a,b) does not overflow",
        "category": "Arithmetic Safety"
      },
      {
        "description": "Only the current owner can initiate ownership transfer",
        "formal": "msg.sender == owner => transferOwnership(_newOwner)",
        "category": "Access Control"
      },
      {
        "description": "Only the new owner can accept ownership",
        "formal": "msg.sender == newOwner => acceptOwnership()",
        "category": "Access Control"
      },
      {
        "description": "No ether should be accepted by the contract",
        "formal": "receive() => revert()",
        "category": "Denial of Service / Consistency"
      },
      {
        "description": "ERC20 transferFrom must reduce sender's allowance accordingly",
        "formal": "allowed[from][msg.sender] := allowed[from][msg.sender] - tokens",
        "category": "ERC20 Consistency"
      },
      {
        "description": "Total supply is sum of all balances (excluding address(0))",
        "formal": "_totalSupply == sum(balances[a] for all a != address(0))",
        "category": "ERC20 Consistency"
      }
    ]
  }
}

