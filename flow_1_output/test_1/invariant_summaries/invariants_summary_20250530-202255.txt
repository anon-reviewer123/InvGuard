Smart Contract Invariants Summary
Generated At: 2025-05-30 20:22:55
Total Invariants: 5

================================================================================
CONTRACT CODE
================================================================================
pragma solidity ^0.4.22;

contract FibonacciBalance {

    address public fibonacciLibrary;
    // the current fibonacci number to withdraw
    uint public calculatedFibNumber;
    // the starting fibonacci sequence number
    uint public start = 3;
    uint public withdrawalCounter;
    // the fibonancci function selector
    bytes4 constant fibSig = bytes4(sha3("setFibonacci(uint256)"));

    // constructor - loads the contract with ether
    constructor(address _fibonacciLibrary) public payable {
        fibonacciLibrary = _fibonacciLibrary;
    }

    function withdraw() {
        withdrawalCounter += 1;
        // calculate the fibonacci number for the current withdrawal user
        // this sets calculatedFibNumber
        // <yes> <report> ACCESS_CONTROL
        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));
        msg.sender.transfer(calculatedFibNumber * 1 ether);
    }

    // allow users to call fibonacci library functions
    function() public {
        // <yes> <report> ACCESS_CONTROL
        require(fibonacciLibrary.delegatecall(msg.data));
    }
}

// library contract - calculates fibonacci-like numbers;
contract FibonacciLib {
    // initializing the standard fibonacci sequence;
    uint public start;
    uint public calculatedFibNumber;

    // modify the zeroth number in the sequence
    function setStart(uint _start) public {
        start = _start;
    }

    function setFibonacci(uint n) public {
        calculatedFibNumber = fibonacci(n);
    }

    function fibonacci(uint n) internal returns (uint) {
        if (n == 0) return start;
        else if (n == 1) return start + 1;
        else return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

================================================================================
GENERATED INVARIANTS
================================================================================

1. 1. fibonacciLibrary != address(0): Ensure that the library address is set before use.
----------------------------------------

2. 2. msg.sender.balance >= calculatedFibNumber * 1 ether: Ensure the sender's balance is sufficient to process the withdrawal.
----------------------------------------

3. 3. withdrawalCounter >= 0: The withdrawal counter should always be non-negative.
----------------------------------------

4. 4. fibonacciLibrary.delegatecall(msg.data) == true: Ensure that delegate calls to the library are successful.
----------------------------------------

5. 5. calculatedFibNumber >= 0: The calculated Fibonacci number should always be non-negative.
----------------------------------------
