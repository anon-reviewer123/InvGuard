Smart Contract Invariants Summary
Generated At: 2025-05-30 21:16:26
Total Invariants: 10

================================================================================
CONTRACT CODE
================================================================================
pragma solidity 0.4.24;

contract Refunder {

address[] private refundAddresses;
mapping (address => uint) public refunds;

    constructor() {
        refundAddresses.push(0x79B483371E87d664cd39491b5F06250165e4b184);
        refundAddresses.push(0x79B483371E87d664cd39491b5F06250165e4b185);
    }

    // bad
    function refundAll() public {
        for(uint x; x < refundAddresses.length; x++) { // arbitrary length iteration based on how many addresses participated
        // <yes> <report> DENIAL_OF_SERVICE
            require(refundAddresses[x].send(refunds[refundAddresses[x]])); // doubly bad, now a single failure on send will hold up all funds
        }
    }

}

================================================================================
GENERATED INVARIANTS
================================================================================

1. 1. x < refundAddresses.length
----------------------------------------

2. - Ensures iteration is within bounds of the refundAddresses array.
----------------------------------------

3. 2. refundAddresses[x] != address(0)
----------------------------------------

4. - Ensures that no zero address is used when sending refunds.
----------------------------------------

5. 3. refunds[refundAddresses[x]] >= 0
----------------------------------------

6. - Guarantees that refund amounts are non-negative.
----------------------------------------

7. 4. refundAddresses.length > 0
----------------------------------------

8. - Ensures that the refundAddresses array is not empty.
----------------------------------------

9. 5. msg.sender == owner
----------------------------------------

10. - Restricts access to the owner for executing the refundAll function.
----------------------------------------
